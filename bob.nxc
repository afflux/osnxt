// vim:ft=c:ts=2:sts=2:sw=2:et

#include "params.nxc"
#include "turns.nxc"

void forward(char pwr) {
  //OnFwdSyncEx(OUT_MOVE, pwr, 0, RESET_ROTATION_COUNT);
  OnFwdSync(OUT_MOVE, pwr, 0);
}

void backoff(unsigned long duration) {
  long rotation = MotorRotationCount(OUT_RIGHT);
  OnRevSync(OUT_MOVE, POWER_MAX, 0);
  until(MotorRotationCount(OUT_RIGHT) < rotation - duration);
  Off(OUT_MOVE);
}

bool ballLoaded = 0;
bool optimizedRound = 0;
bool shortRound = 0;

void throwBall(){
  RotateMotor(OUT_ARM, ARM_THROW_POWER, 60);
  ballLoaded = 0;
  shortRound = 0;
}

task collect() {
  SetSensorLowspeed(IN_LOAD_BALL); //sets Light sensor to port 3

  while (run) {
    until(!ballLoaded);

    OnFwd(OUT_ARM, ARM_COLLECT_POWER);

    short c, r, g, b, avg;
    while(true){
      ReadSensorHTColor(IN_3, c, r, g, b);
      avg = (r+g+b)/3;
      if(r - avg > 20) break;
      if(b > 35 && g > 10 && b - g > 15) break;
    }
    Off(OUT_ARM);
    ballLoaded = 1;
    optimizedRound = 0;
  }
}


int tracing;
task trace() {
  tracing = 1;
  SetSensorLight(IN_2);
  until(!tracing || Sensor(IN_2) < LIGHT_THRESHOLD);
  until(!tracing || Sensor(IN_2) > LIGHT_THRESHOLD);
  if (tracing) {
    Off(OUT_MOVE);

    pointTurn(DIRECTION_RIGHT, POINTTURN45);

    Off(OUT_MOVE);

    forward(POWER_MAX);
  }
}


/*****************************************
                 MAIN
*****************************************/

/* Write <message>=<number> to the bluetooth log. */
void bt_log_number(string message, int number){
  string log_msg = message;
  strcat(log_msg, "=");
  strcat(log_msg, NumToStr(number));
  bt_log(log_msg);
}

void initial_setup(){
  init_bt_log();
  Wait(1000);
  bt_log("Hello Dave.");

  SetSensorTouch(IN_TOUCH_WALL);
  SetSensorUltrasonic(IN_DISTANCE);

  orientation = 0;
  run = 1;
}

void opening_move(){
  pointTurn(DIRECTION_LEFT, POINTTURN90);

  updateOrientation(-90);

  LOG(NumToStr(orientation));

  forward(POWER_MAX);
  until(SENSOR_TOUCH_WALL == 1);
  Wait(200);
  Off(OUT_MOVE);

  backoff(BACKOFF_DURATION_WALL);

  bt_log_number("DISTANCE", SENSOR_DISTANCE);

  closeTurn(DIRECTION_RIGHT);
  Off(OUT_MOVE);
}

task main() {
  initial_setup();

  opening_move();

  StartTask(collect);
  while (1) {
    ResetRotationCount(OUT_MOVE);
    Yield();
    forward(POWER_MAX);
    if (isLookingAt(0)) { // looking at net
      PlayTone(TONE_C4, 200);
      bt_log("APPROACHING NET");

      if (!shortRound) {
        until(MotorRotationCount(OUT_RIGHT) > ROTATION_THRESHOLD_NET) {
          bt_log_number("RROT", MotorRotationCount(OUT_RIGHT));
        }
      }

      bt_log("CLOSING IN");

      PlayTone(TONE_C7, 200);

      until(SENSOR_DISTANCE < TURN_DISTANCE_NETPILLAR || SENSOR_TOUCH_WALL == 1){
        bt_log_number("NETDIST", SENSOR_DISTANCE);
      }
      PlayTone(TONE_C4, 100);
      Off(OUT_MOVE);

      // we are supposed to be standing right in front of the net here
      if (!ballLoaded)
        shortRound = !shortRound;

      while (ballLoaded) {
        throwBall();
        Wait(THROW_AGAIN_WAIT);
      }

      if (shortRound == 1) {
        bt_log("doing a reduced round");
        backoff(BACKOFF_DURATION_NET_SHORT);
      }
      else {
        bt_log("doing a normal round");
        backoff(BACKOFF_DURATION_NET);
      }

      pointTurn(DIRECTION_RIGHT, POINTTURNNET);
    }
    else {
      bt_log("approaching wall");

      // align at walls by running against
      until(SENSOR_TOUCH_WALL == 1) {
        if (!isLookingAt(-90) && ballLoaded && !optimizedRound) {
          // this is either next to the net or moving away from it.
          // if we find a ball there, we turn around immediately instead of
          // going until the wall
          optimizedRound = 1;
          Off(OUT_MOVE);
          break;
        }
      }
      Wait(200);

      Off(OUT_MOVE);

      tracing=0; //stops line tracing task

      if (isLookingAt(180) && shortRound)
        backoff(BACKOFF_DURATION_WALL_SHORT);
      else
        backoff(BACKOFF_DURATION_WALL);
    }

    closeTurn(DIRECTION_RIGHT);
    Off(OUT_MOVE);

    if (isLookingAt(90))
      StartTask(trace);
  }

  run = 0;
  StopAllTasks();
  Stop(true);
}
