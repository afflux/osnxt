// vim:ft=c:ts=2:sts=2:sw=2:et

/* A small map:
+-------------------------------------++
|                                      |
|            +------------+            |
|            |            |            |
|            |  OPPONENT  |            |
|            |            |            |
|            |            |            |
|            +------------+            |
|                                      |
|                                      |
|                                      |
|                                      |
|               THE NET                |
+======================================+
|                                      |
|                                     R|
| L                                   I|
| E                                   G|
| F                                   H|
| T          +------------+           T|
|            |  \  ||  /  |            |
| W          |   \=||=/   |           W|
| A          |   |bob |   |           A|
| L          |   |____|   |           L|
| L          +------------+           L|
+--------------------------------------+

Relevant vocabulary:
  Close turn: A wide turn intended to bring Bob close to a wall
  Point turn: Turning on the spot
  Routine: Handling a wall and backing off, ready for next close turn.
  Short round: Driving closer to the middle of the field on horizontal routines
    rather than driving close to a wall. Done if no ball was found along the walls.
*/

#include "params.nxc"
#include "turns.nxc"

bool ballLoaded = 0;
bool shortRound = 0;
bool optimizedRound = 0;
int tracing;

void stopDriving(){
  Off(OUT_MOVE);
}

void forward(char pwr) {
  //OnFwdSyncEx(OUT_MOVE, pwr, 0, RESET_ROTATION_COUNT);
  OnFwdSync(OUT_MOVE, pwr, 0);
}

void backoff(unsigned long duration) {
  ResetRotationCount(OUT_MOVE);
  Yield();
  OnRevSync(OUT_MOVE, POWER_MAX, 0);
  until(MotorRotationCount(OUT_RIGHT) < 0 - duration);
  stopDriving();
}

void throwBall(){
  RotateMotor(OUT_ARM, ARM_THROW_POWER, ARM_THROW_DEGREE);
  ballLoaded = 0;
  shortRound = 0;
}

/* Blocks until a ball is detected by the color sensor */
void waitForBall(){
  short c;
  while (true){
    c = SensorHTColorNum(IN_LOAD_BALL);
    if (c == 9) {
      PlayTone(TONE_D4, 100);
      return;
    }
    if (c == 2) {
      PlayTone(TONE_D4, 100);
      return;
    }
  }
}

task collect() {
  SetSensorLowspeed(IN_LOAD_BALL); //sets Light sensor to port 3

  while (run) {
    until(!ballLoaded);
    OnFwd(OUT_ARM, ARM_COLLECT_POWER);
    waitForBall();
    Off(OUT_ARM);
    ballLoaded = 1;
    optimizedRound = 0;
  }
}

bool isOnBlackLine(){
  return Sensor(IN_LINE_COLOR) < LIGHT_THRESHOLD;
}

bool isOffBlackLine(){
  return Sensor(IN_LINE_COLOR) > LIGHT_THRESHOLD;
}

void crossBlackLineOrQuitTracing(){
  until(!tracing || isOnBlackLine());
  until(!tracing || isOffBlackLine());
}

task trace() {
  PlayTone(TONE_C5, 100);
  tracing = 1;
  SetSensorLight(IN_LINE_COLOR);
  crossBlackLineOrQuitTracing();
  if (tracing) {
    stopDriving();
    pointTurn(DIRECTION_RIGHT, POINTTURN45);
    forward(POWER_MAX);
  }
}

/* Write <message>=<number> to the bluetooth log. */
void btLogNumber(string message, int number){
  string log_msg = message;
  strcat(log_msg, "=");
  strcat(log_msg, NumToStr(number));
  bt_log(log_msg);
}

void initial_setup(){
  init_bt_log();
  Wait(1000);
  bt_log("Hello Dave.");

  SetSensorTouch(IN_TOUCH_WALL);
  SetSensorUltrasonic(IN_DISTANCE);

  orientation = 0;
  run = 1;
}

void crashAndAlignWithWall(){
  // align with wall by running against it for a short duration
  until(SENSOR_TOUCH_WALL == 1) {
    bool foundOptimizableBall = !isLookingAt(-90) && ballLoaded && !optimizedRound;
    if (foundOptimizableBall) {
      // this is either next to the net or moving away from it.
      // if we find a ball there, we turn around immediately instead of
      // going until the wall
      optimizedRound = 1;
      stopDriving();
      break;
    }
  }
  Wait(200);
  stopDriving();
}

void backoffFromWall(){
  if (isLookingAt(180) && shortRound)
    backoff(BACKOFF_DURATION_WALL_SHORT);
  else
    backoff(BACKOFF_DURATION_WALL);
}


/* Turn to face the left wall */
void opening_move(){
  pointTurn(DIRECTION_LEFT, POINTTURN90);
  updateOrientation(-90);
  LOG(NumToStr(orientation));
  forward(POWER_MAX);
  crashAndAlignWithWall();
  backoffFromWall();
  btLogNumber("DISTANCE", SENSOR_DISTANCE);
  closeTurn(DIRECTION_RIGHT);
}

bool isCloseToPillar(){
  return SENSOR_DISTANCE < TURN_DISTANCE_NETPILLAR || SENSOR_TOUCH_WALL == 1 || isOnBlackLine();
}

void throwAsManyBallsAsPossible(){
  while (ballLoaded) {
    throwBall();
    Wait(THROW_AGAIN_WAIT);
  }
}

void backoffFromNet(){
  if (shortRound == 1) {
    bt_log("doing a reduced round");
    backoff(BACKOFF_DURATION_NET_SHORT);
  }
  else {
    bt_log("doing a normal round");
    backoff(BACKOFF_DURATION_NET);
  }
}

void driveMinimumDistanceTowardsPillar(){
  if (!shortRound) {
    until(MotorRotationCount(OUT_RIGHT) > ROTATION_THRESHOLD_NET) {
      btLogNumber("RROT", MotorRotationCount(OUT_RIGHT));
    }
  }
}

/* Takes Bob from a spot on the left wall to the edge of the net */
void driveToNet(){
  bt_log("APPROACHING NET");

  /* Drive closer to the net before activating the distance sensor */
  driveMinimumDistanceTowardsPillar();

  bt_log("CLOSING IN");

  SetSensorLight(IN_LINE_COLOR);

  until(isCloseToPillar()){
    btLogNumber("NETDIST", SENSOR_DISTANCE);
  }

  stopDriving();
}

void doNetRoutine(){
  driveToNet();

  // If we did an entire round without finding a ball, switch route
  if (!ballLoaded)
    shortRound = !shortRound;

  // we are now (hopefully) standing in front of the net
  throwAsManyBallsAsPossible();
  backoffFromNet();

  // Do a very small pointturn to prevent the next closeTurn from crossing the line
  pointTurn(DIRECTION_RIGHT, POINTTURNNET);
}

void doWallRoutine(){
  if (isLookingAt(90))
    // trace the line before going next to the net
    StartTask(trace);

  bt_log("approaching wall");
  crashAndAlignWithWall();
  tracing = 0; //stops line tracing task
  backoffFromWall();
}

/*
* A single routine is the sequence of taking Bob from the state 'driving along a wall' to
* backed off the appropriate distance (via detecting the net or aligning with a wall).
*/
void doRoutine(){
  if (isLookingAt(0)) { // looking at net
    doNetRoutine();
  }
  else {
    doWallRoutine();
  }
}

task main() {
  initial_setup();
  opening_move();
  StartTask(collect);
  while (1) {
    ResetRotationCount(OUT_MOVE);
    Yield();
    forward(POWER_MAX);
    doRoutine();
    closeTurn(DIRECTION_RIGHT);
  }
}
