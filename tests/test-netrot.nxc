// vim:ft=c:ts=2:sts=2:sw=2:et

#include "params.nxc"
#include "turns.nxc"

void forward(char pwr) {
  //OnFwdSyncEx(OUT_MOVE, pwr, 0, RESET_ROTATION_COUNT);
  OnFwdSync(OUT_MOVE, pwr, 0);
}

void backoff(unsigned long duration) {
  OnRevSync(OUT_MOVE, POWER_MAX, 0);
  Wait(duration);
  Off(OUT_MOVE);
}

byte run;
bool ballLoaded = 0;

void throwBall(){
  RotateMotor(OUT_ARM, 100, 60);
  ballLoaded = 0;
}

task collect() {
  SetSensorLowspeed(IN_3); //sets Light sensor to port 3

  while (run) {
    until(!ballLoaded);

    OnFwd(OUT_ARM, 40);

    short c, r, g, b, avg;
    while(true){
      ReadSensorHTColor(IN_3, c, r, g, b);
      avg = (r+g+b)/3;
      if(r - avg > 20) break;
      if(b > 35 && g > 10 && b - g > 15) break;
    }
    Off(OUT_ARM);
    ballLoaded = 1;

  }
}

task dist() {
  while(run) {
    string val = "DISTANCE=";
    strcat(val, NumToStr(SENSOR_DISTANCE));
    bt_log(val);

    val = "L=";
    strcat(val, NumToStr(MotorRotationCount(OUT_LEFT)));
    strcat(val, "R=");
    strcat(val, NumToStr(MotorRotationCount(OUT_RIGHT)));
    bt_log(val);

    Wait(100);
  }
}


short n = 0;
task main() {
  init_bt_log();
  Wait(1000);

  SetSensorTouch(IN_1);
  SetSensorUltrasonic(IN_4);

  orientation = 0;

  run = 1;
  StartTask(dist);

  pointTurn(DIRECTION_LEFT, POINTTURN90);

  orientation -= 90;
  orientation %= 360;
  LOG(NumToStr(orientation));

  forward(POWER_MAX);
  until(SENSOR_TOUCH_WALL == 1);

  backoff(BACKOFF_DURATION_WALL);

  closeTurn(DIRECTION_RIGHT);

  while (1) {
    ResetRotationCount(OUT_MOVE);
    Yield();
    forward(POWER_MAX);
    if (isLookingAtNet()) {
      if (n++ > 0) {
        until(MotorRotationCount(OUT_RIGHT) > 600);
        Off(OUT_MOVE);

        NumOut(0, LCD_LINE1, MotorRotationCount(OUT_LEFT));
        NumOut(0, LCD_LINE2, MotorRotationCount(OUT_RIGHT));
        break;
      } else {
      until(SENSOR_DISTANCE < TURN_DISTANCE_NETPILLAR);
      Off(OUT_MOVE);

      backoff(BACKOFF_DURATION_NET);
      pointTurn(DIRECTION_RIGHT, POINTTURNNET); 
      }
    }
    else {
      // align at walls by running against
      until(SENSOR_TOUCH_WALL == 1);
      Float(OUT_MOVE);
      backoff(BACKOFF_DURATION_WALL);
    }

    closeTurn(DIRECTION_RIGHT);
    Off(OUT_MOVE);
  }

  run = 0;
  for(;;);
}
