// vim:ft=c:ts=2:sts=2:sw=2:et

#include "params.nxc"
#define SWINGTURN90 (SWINGTURN45 * 2)
#define SWINGTURN45 1185
#define POINTTURN90 600
#define POINTTURNNET 60
#define POINTTURN45 280

#define POWER_TURN_MAIN POWER_MAX
#define POWER_TURN_OPPOSITE 72

// this is the current orientation in degrees
int orientation = 0;

/*
 * custom modulo implementation because C modulus is unreliable with signeds
 */
inline int mod(int a, int b) {
  int r = a % b;
  return r < 0 ? r + b : r;
}

void updateOrientation(int val) {
  orientation += val;
  orientation = mod(orientation + 180, 360) - 180;
}

/*
 * a swing turn is a turn where both wheels turn forward:
 * the outer wheel at full power, the inner wheel at reduced power.
 * amount is the number of rotations the outer wheel will be doing in the turn
 */
void swingTurn(bool direction, long amount) {
  byte         output = direction == DIRECTION_LEFT ? OUT_RIGHT : OUT_LEFT; 
  byte oppositeOutput = direction == DIRECTION_LEFT ? OUT_LEFT : OUT_RIGHT;
  long initialRotationCount = MotorRotationCount(output);

  OnFwd(output, POWER_TURN_MAIN);
  OnFwd(oppositeOutput, POWER_TURN_OPPOSITE);

  until (MotorRotationCount(output) - initialRotationCount > amount);

  Off(OUT_MOVE);
}

/*
 * a point turn is a turn on the spot, both wheels turn in opposite directions
 * amount is the number of rotations the outer wheel will be doing
 */
void pointTurn(bool direction, long amount) {
  char        turnpct = direction == DIRECTION_LEFT ? TURNPCT_LEFT : TURNPCT_RIGHT;
  byte countingOutput = direction == DIRECTION_LEFT ? OUT_RIGHT : OUT_LEFT;

  long initialRotationCount = MotorRotationCount(countingOutput);

  OnFwdSync(OUT_MOVE, POWER_MAX, turnpct);

  until (MotorRotationCount(countingOutput) - initialRotationCount > amount);

  Off(OUT_MOVE);
}

/*
 * a close turn is a 90 degree turn that, when executed with a certain
 * distance facing a wall, should place the robot close to that wall.
 * This is achieved by doing a 45 degree point turn, followed by a  45 degree
 * swing turn.
 */
void closeTurn(bool direction) {
  int turnOrientation = direction == DIRECTION_RIGHT ? 90 : -90;

  pointTurn(direction, POINTTURN45); 
  swingTurn(direction, SWINGTURN45);

  updateOrientation(turnOrientation);
}

inline bool isLookingAt(int direction) {
  return abs(mod(orientation + 180 - direction, 360) - 180) < 15;
}
